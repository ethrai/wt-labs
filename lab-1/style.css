/**
  Нормализация блочной модели
 */
*,
*::before,
*::after {
    box-sizing: border-box;
}

/**
  Убираем внутренние отступы слева тегам списков,
  у которых есть атрибут class
 */
:where(ul, ol):where([class]) {
    padding-left: 0;
}

/**
  Убираем внешние отступы body и двум другим тегам,
  у которых есть атрибут class
 */
body,
:where(blockquote, figure):where([class]) {
    margin: 0;
}

/**
  Убираем внешние отступы вертикали нужным тегам,
  у которых есть атрибут class
 */
:where(
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p,
  ul,
  ol,
  dl
):where([class]) {
    margin-block: 0;
}

:where(dd[class]) {
    margin-left: 0;
}

:where(fieldset[class]) {
    margin-left: 0;
    padding: 0;
    border: none;
}

/**
  Убираем стандартный маркер маркированному списку,
  у которого есть атрибут class
 */
:where(ul[class]) {
    list-style: none;
}

/**
  Обнуляем вертикальные внешние отступы параграфа,
  объявляем локальную переменную для внешнего отступа вниз,
  чтобы избежать взаимодействие с более сложным селектором
 */
p {
    --paragraphMarginBottom: 24px;

    margin-block: 0;
}

/**
  Внешний отступ вниз для параграфа без атрибута class,
  который расположен не последним среди своих соседних элементов
 */
p:where(:not([class]):not(:last-child)) {
    margin-bottom: var(--paragraphMarginBottom);
}


/**
  Упрощаем работу с изображениями
 */
img {
    display: block;
    max-width: 100%;
}

/**
  Наследуем свойства шрифт для полей ввода
 */
input,
textarea,
select,
button {
    font: inherit;
}

html {
    /**
      Пригодится в большинстве ситуаций
      (когда, например, нужно будет "прижать" футер к низу сайта)
     */
    height: 100%;
    /**
      Плавный скролл
     */
    scroll-behavior: smooth;
}

body {
    /**
      Пригодится в большинстве ситуаций
      (когда, например, нужно будет "прижать" футер к низу сайта)
     */
    min-height: 100%;
    /**
      Унифицированный интерлиньяж
     */
    line-height: 1.5;
}

/**
  Приводим к единому цвету svg-элементы
 */
svg *[fill] {
    fill: currentColor
}

svg *[stroke] {
    stroke: currentColor
}

/**
  Чиним баг задержки смены цвета при взаимодействии с svg-элементами
 */
svg * {
    transition-property: fill, stroke;
}

/**
  Удаляем все анимации и переходы для людей,
  которые предпочитают их не использовать
 */
@media (prefers-reduced-motion: reduce) {
    * {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
        scroll-behavior: auto !important;
    }
}

:root {
    --main-bg-dark: hsl(261, 51%, 47%);
    --main-bg-white: hsl(266, 44%, 94%);
    --secondary-bg-dark: hsl(261, 97%, 76%);
}

* {
    font-family: "Roboto", sans-serif;
    font-weight: 400;
    font-style: normal;
}

.header {
    background-color: var(--main-bg-dark);
    position: absolute;
    z-index: 100;
    top: 0;
    left: 0;
    width: 100%;
    height: 27vh;
}

main {
    display: flex;
    flex-direction: column;
}

.container {
    align-self: center;
    margin: 22vh 10px;
    position: relative;
    z-index: 200;
    background-color: white;
    width: 65%;
    min-width: 548px;
    max-width: 980px;
    padding: 10px 40px;
    border: darkgrey 1px solid;
}

.form-group {
    margin: 15px 0;
}

.form-group > label {
    display: block;
    font-size: 1.2em;
    font-weight: 550;
}


body {
    background-color: var(--main-bg-white);
}

.form-header {
}

.line {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    background-color: var(--secondary-bg-dark);
    height: 8px;
}

.text-info {
    font-size: 0.9em;
    margin: 10px 0;
}

.warning {
    color: indianred;
}

.button-submit {
    background-color: hsl(217, 88%, 61%);
    color: white;
    border: 0;
    border-radius: 3px;
    font-size: 0.9em;
    padding: 7px 15px;
}

.text-gray-info {
    color: gray;
    margin: 20px;
    font-size: 0.8em;
}

.footer {
    position: fixed;
    height: 25vh;
    width: 100%;
    z-index: 100;
    bottom: 0;
    left: 0;
}